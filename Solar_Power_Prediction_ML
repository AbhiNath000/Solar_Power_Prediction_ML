import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score

file_path = r'D:\7th SEMESTER\SIH\DATASETS\ml_filled.csv'
data = pd.read_csv(file_path)

features = ["Year", "Month", "Product", "State"]

X = data[features]
y = data['Requirement(in 000\'MTS)']

X = pd.get_dummies(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

requirement_tree = DecisionTreeRegressor()

param_grid = {
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(estimator=requirement_tree, param_grid=param_grid, cv=5)
grid_search.fit(X_train, y_train)

best_requirement_tree = grid_search.best_estimator_

y_pred = best_requirement_tree.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error (MSE): {mse}')

r2 = r2_score(y_test, y_pred)
print(f'R-squared (R2) Score: {r2 * 100:.2f}%')

def get_user_input():
    user_input = {}
    for feature in features:
        value = input(f"Enter {feature}: ")
        user_input[feature] = value
    return user_input

new_data = pd.DataFrame([get_user_input()])

new_data = pd.get_dummies(new_data.reindex(columns=X.columns, fill_value=0))

predicted_requirement = best_requirement_tree.predict(new_data)

print(f"Predicted Requirement: {predicted_requirement[0]:.2f} 'MTS'")
